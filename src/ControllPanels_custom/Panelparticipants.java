/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ControllPanels_custom;

import DataBox_cutom.Database0;
import JSO.Com.Main.ImagePanel;
import JSO.Com.Main.TimerTimer;
import JSO.Com.Main.TimerUser;
import java.awt.Color;
import javax.swing.JFrame;
import javax.swing.JTextField;

/**
 *
 * @author Shayan
 */
public class Panelparticipants extends javax.swing.JPanel implements TimerUser {

    EstekanBase main;
    Database0 database0;
    int id;
    boolean newsha = false;
    TimerTimer timer;
    boolean pointPlusAtive, pointMinActive, startdelayB;
    //boolean timeQactive, gotoactive;
    //  long gotoactiveator;
    long timecurrent;
    long startaddingTimer, startdelay;
    long timerFixstop, timerstartdelay = 600;
    JTextField jtextname[];
    ImagePanel imagePanel;
    int selected;

    public Panelparticipants(int id, EstekanBase main) {
        newsha = false;
        initComponents();
        this.id = id;
        this.main = main;
        database0 = main.database0;
        jToggleButtoniN.setActionCommand("" + (id + 1));
        init();
        startdelayB = false;
        timerFixstop = database0.getTimerFixstop();
        timer = new TimerTimer(this, 0, 0, 6000, 0);
        timer.setWait(10);
        timer.setWaitTimeAbselute(true);
        timer.setActive(true);
        timer.start();
        newsha = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jToggleButtoniN = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        jPanelPic = new javax.swing.JPanel();
        jPanelSelection = new javax.swing.JPanel();
        jLabelXX = new javax.swing.JLabel();
        jSpinnerTOTAL = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jSpinnertime1 = new javax.swing.JSpinner();
        jSpinnerError = new javax.swing.JSpinner();
        jPanel5 = new javax.swing.JPanel();
        jSpinnercurrentspeed = new javax.swing.JSpinner();
        jSpinnercurrentpoint = new javax.swing.JSpinner();
        jPanel4 = new javax.swing.JPanel();
        jPanelNames = new javax.swing.JPanel();

        setLayout(new java.awt.GridLayout(0, 1));

        jPanel2.setLayout(new java.awt.GridLayout(0, 1));

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jToggleButtoniN.setText("i");
        jToggleButtoniN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtoniNActionPerformed(evt);
            }
        });
        jPanel3.add(jToggleButtoniN);

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jPanelPic.setBackground(new java.awt.Color(0, 0, 0));
        jPanelPic.setMinimumSize(new java.awt.Dimension(50, 50));
        jPanelPic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelPicMouseClicked(evt);
            }
        });
        jPanelPic.setLayout(new java.awt.GridLayout(1, 0));
        jPanel6.add(jPanelPic);

        jPanel3.add(jPanel6);

        jPanelSelection.setLayout(new java.awt.GridLayout(1, 0));

        jLabelXX.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelXX.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelXX.setText("selected");
        jPanelSelection.add(jLabelXX);

        jPanel3.add(jPanelSelection);

        jPanel2.add(jPanel3);

        jSpinnerTOTAL.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jSpinnerTOTAL.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerTOTAL.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerTOTALStateChanged(evt);
            }
        });
        jPanel2.add(jSpinnerTOTAL);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jSpinnertime1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jSpinnertime1.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnertime1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnertime1StateChanged(evt);
            }
        });
        jPanel1.add(jSpinnertime1);

        jSpinnerError.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jSpinnerError.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnerError.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerErrorStateChanged(evt);
            }
        });
        jPanel1.add(jSpinnerError);

        jPanel2.add(jPanel1);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        jSpinnercurrentspeed.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jSpinnercurrentspeed.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnercurrentspeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnercurrentspeedStateChanged(evt);
            }
        });
        jPanel5.add(jSpinnercurrentspeed);

        jSpinnercurrentpoint.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jSpinnercurrentpoint.setModel(new javax.swing.SpinnerNumberModel());
        jSpinnercurrentpoint.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnercurrentpointStateChanged(evt);
            }
        });
        jPanel5.add(jSpinnercurrentpoint);

        jPanel2.add(jPanel5);

        add(jPanel2);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jPanelNames.setLayout(new java.awt.GridLayout(0, 1));
        jPanel4.add(jPanelNames);

        add(jPanel4);
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinnerTOTALStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerTOTALStateChanged
        // TODO add your handling code here:
        if (newsha) {
            main.participantupdatepoint(id + 1);
        }
    }//GEN-LAST:event_jSpinnerTOTALStateChanged

    private void jSpinnerErrorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerErrorStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerErrorStateChanged

    private void jPanelPicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelPicMouseClicked
        // TODO add your handling code here:
        getPic();
    }//GEN-LAST:event_jPanelPicMouseClicked

    private void jSpinnercurrentpointStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnercurrentpointStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnercurrentpointStateChanged

    private void jSpinnertime1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnertime1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnertime1StateChanged

    private void jSpinnercurrentspeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnercurrentspeedStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSpinnercurrentspeedStateChanged

    private void jToggleButtoniNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtoniNActionPerformed
        // TODO add your handling code here:
        if(newsha )        main.participantselect(id+1 ,jToggleButtoniN.isSelected());
    }//GEN-LAST:event_jToggleButtoniNActionPerformed
//    public void tableIn(boolean in) {
//        boolean newsh = newsha;
//        newsha = false;
////        jToggleButtonIn.setSelected(in);
//        newsha = newsh;
//    }

//    public boolean istableup() {
//        return jToggleButtonIn.isSelected();
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelXX;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelNames;
    private javax.swing.JPanel jPanelPic;
    private javax.swing.JPanel jPanelSelection;
    private javax.swing.JSpinner jSpinnerError;
    private javax.swing.JSpinner jSpinnerTOTAL;
    private javax.swing.JSpinner jSpinnercurrentpoint;
    private javax.swing.JSpinner jSpinnercurrentspeed;
    private javax.swing.JSpinner jSpinnertime1;
    public javax.swing.JToggleButton jToggleButtoniN;
    // End of variables declaration//GEN-END:variables
//    int current_timex100, current_selection, current_changedAnswer, current_pointx1000, current_Speed1234;
    private void init() {
        jtextname = new JTextField[5];
        for (int i = 0; i < jtextname.length; i++) {
            jtextname[i] = new JTextField(database0.getParticipants(id).getName(i));
            jtextname[i].setHorizontalAlignment(javax.swing.JTextField.CENTER);
            jPanelNames.add(jtextname[i]);
        }
        imagePanel = new ImagePanel(database0.getParticipants(id).getPic());
        jPanelPic.add(imagePanel);
        updatefromdatabase();
//        jSpinnerError.setValue(database0.getParticipants(id).getCurrent_changedAnswer());
//        jSpinnerTOTAL.setValue(database0.getParticipants(id).getCurrent_pointx1000());
//        jSpinnercurrentpoint.setValue(0);
//        jSpinnertime1.setValue(database0.getParticipants(id).getCurrent_timex100());
//        jSpinnercurrentspeed.setValue(database0.getParticipants(id).getCurrent_Speed1234());
//        imagePanel = new ImagePanel(database0.getParticipants(id).getPic());
//        jPanelPic.add(imagePanel);
//        setselectedGoz(database0.getParticipants(id).getCurrent_selection());

    }

    public void setpointTotal(int point) {
        boolean b = newsha;
        newsha = false;
        jSpinnerTOTAL.setValue(point);
        updatefromdatabase();
        newsha = b;
    }

//    public void addpoint_(int point) {
//        int point0 = (int) jSpinner1.getValue();
//        point0 = point0 + point;
//        jSpinner1.setValue(point0);
//        database0.getParticipants(id).setPoint(point0);
//    }
    public int getpointTotal() {
        return (int) jSpinnerTOTAL.getValue();
    }

    public int getError() {

        return (int) jSpinnerError.getValue();
    }

    public boolean isactive() {
        return jToggleButtoniN.isSelected();
    }

    public void setError(int point) {
        boolean b = newsha;
        newsha = false;
        jSpinnerError.setValue(point);
//        database0.getParticipants(id).setPointTotal(point);
        newsha = b;

    }

    public int getSpeed() {

        return (int) jSpinnercurrentspeed.getValue();
    }

    public void setSpeed(int point) {
        boolean b = newsha;
        newsha = false;
        jSpinnercurrentspeed.setValue(point);
//        database0.getParticipants(id).setPointTotal(point);
        newsha = b;

    }

    public int getPoint() {

        return (int) jSpinnercurrentpoint.getValue();
    }

    public void setpoint(int point) {
        boolean b = newsha;
        newsha = false;
        jSpinnercurrentpoint.setValue(point);
//        database0.getParticipants(id).setPointTotal(point);
        newsha = b;

    }

    public int gettime() {

        return (int) jSpinnertime1.getValue();
    }

    public void settime(int point) {
        boolean b = newsha;
        newsha = false;
        jSpinnertime1.setValue(point);
//        database0.getParticipants(id).setPointTotal(point);
        newsha = b;

    }

    @Override
    public void updatetime(long time) {
        long x = time - timecurrent;
        timecurrent = time;
//        int x2 , m ; 
        if (startdelayB) {
            if ((timecurrent - startaddingTimer) > timerstartdelay) {
                startdelayB = false;
                startaddingTimer = timecurrent;
            }
        } else {
            if (pointPlusAtive) {
                if ((timecurrent - startaddingTimer) >= timerFixstop) {
                    int x2 = (int) jSpinnercurrentpoint.getValue();
                    int m = (int) jSpinnerTOTAL.getValue();
                    if (x2 > 10) {

                        jSpinnercurrentpoint.setValue(x2 - 10);
                        boolean b = newsha;
                        newsha = false;
                        jSpinnerTOTAL.setValue(m + 10);
                        newsha = b;
//                        main.participantaddpoint(id + 1, 1);
                        startaddingTimer = startaddingTimer + timerFixstop;
                    } else {
                          jSpinnercurrentpoint.setValue(0);
                        boolean b = newsha;
                        newsha = false;
                        jSpinnerTOTAL.setValue(m + x2);
                        newsha = b;
                        pointPlusAtive = false;
//                        main.updatecontrolpack(true);
//                        main.controll.getSounds().playcoinEnd();
                    }
                }
            } else if (pointMinActive) {
                if ((timecurrent - startaddingTimer) >= timerFixstop) {
                    int x2 = (int) jSpinnercurrentpoint.getValue();
                    int m = (int) jSpinnerTOTAL.getValue();
                    if (x2 < -9 ) {//&& m > 10
                        jSpinnercurrentpoint.setValue(x2 + 10);
                        boolean b = newsha;
                        newsha = false;
                        jSpinnerTOTAL.setValue(m - 10);
                        newsha = b;
//                        main.participantaddpoint(id + 1, 2);
                        startaddingTimer = startaddingTimer + timerFixstop;
                    } else {
                         jSpinnercurrentpoint.setValue(0);
                        boolean b = newsha;
                        newsha = false;
                        jSpinnerTOTAL.setValue(m - x2);
                        newsha = b;
                        pointMinActive = false;
//                        main.updatecontrolpack(true);
//                        main.controll.getSounds().playcoinEnd();
                    }
                }
            }
        }
    }

    void updateDatabaseParticipants() {
        for (int i = 0; i < jtextname.length; i++) {
            database0.getParticipants(id).setName(i, jtextname[i].getText());
            database0.getParticipants(id).setPic(imagePanel.getAddress());

        }
    }

    private void getPic() {
//        System.out.println("990231- selectpic run 1");
        imagePanel.drawImage(selectPicRead());
//  System.out.println("990231- selectpic run 2");
        main.updatedatabase();
    }

    public String selectPicRead() {
//          System.out.println("990231- selectpic run 10");
//        javax.swing.JFrame f1 = new javax.swing.JFrame("dsj - play movie");
        java.awt.FileDialog fd = new java.awt.FileDialog(new JFrame("انتخاب عکس"), "انتخاب تصاویر", java.awt.FileDialog.LOAD);
        fd.setMultipleMode(false);
//        fd.setDirectory(database1.getPicTop());
        fd.setVisible(true);
//  System.out.println("990231- selectpic run 11");
        if (fd.getFile() == null) {
            return "pictures\\nopic.png";
        } else {
//             System.out.println("990231- selectpic run 12");
            return fd.getDirectory() + fd.getFile();
        }
         
    }

    public void setselectedGoz(int current_selection) {
        selected = current_selection;
        jLabelXX.setText("" + current_selection);
        switch (selected) {
            case 1:
                jPanelSelection.setBackground(Color.GREEN);
                break;
            case 2:
                jPanelSelection.setBackground(Color.white);
                break;
            case 3:
                jPanelSelection.setBackground(Color.RED);
                break;
            case 4:
                jPanelSelection.setBackground(Color.cyan);
                break;
            default:
                jLabelXX.setText("X");
                jPanelSelection.setBackground(Color.DARK_GRAY);
                break;
        }

    }

    public int getSelectedGoz() {
        return selected;
    }
//    public void resetQuestion(boolean update){
//        
//          if(update)      main.updateDatabaseParticipants();
//    }

    public void updatefromdatabase() {
        for (int i = 0; i < jtextname.length; i++) {
            jtextname[i].setText(database0.getParticipants(id).getName(i));
        }
        jSpinnerError.setValue(database0.getParticipants(id).getCurrent_changedAnswer());
        jSpinnerTOTAL.setValue(database0.getParticipants(id).getPointTotal());
        jSpinnercurrentpoint.setValue(database0.getParticipants(id).getCurrent_pointx1000());
        jSpinnertime1.setValue(database0.getParticipants(id).getCurrent_timex100());
        jSpinnercurrentspeed.setValue(database0.getParticipants(id).getCurrent_Speed1234());
        imagePanel.drawImage(database0.getParticipants(id).getPic());
//        jPanelPic.add(imagePanel);
        setselectedGoz(database0.getParticipants(id).getCurrent_selection());
    }

    void addError() {
        jSpinnerError.setValue(1 + (int) jSpinnerError.getValue());
    }

    String[] getnames() {
        String nams[] = new String[jtextname.length];
        for (int i = 0; i < jtextname.length; i++) {
            nams[i] = jtextname[i].getText();
        }
        return nams;
    }
String getAx(){
return imagePanel.getAddress();
}
    void startAddpontTotoal() {
        if ((int) jSpinnercurrentpoint.getValue() > 0) {
            pointPlusAtive = true;
        } else {
            pointMinActive = true;
        }
    }

    void setInOut(boolean b) {
     nof();
     jToggleButtoniN.setSelected(b);
     non();
    }
boolean b;
void nof(){
    b=newsha;
    newsha=false;
}
void non(){
    newsha=b;
}
}
